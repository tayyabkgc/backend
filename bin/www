#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("ifers-backend:server");
var http = require("http");
const socketIo = require("socket.io");
const socket = require("../helpers/sockets");
const marketEventListener = require("../contract/marketEventListener");
const referral = require("../services/referral");
const KGCEventListener = require("../contract/kgcEventListener");
const admin = require("../services/admin");

require("../cron");

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || "3000");

app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const io = socketIo(server, {
  cors: {
    origin: "*", // Adjust the origin to your React app URL
    methods: ["GET", "POST", "PUT", "DELETE", "PATCH"],
  },
});

// Socket.io Connection
socket.configure(io);

io.on("connection", (socketIo) => {
  socketIo.on("comment", (msg) => {
    io.emit("new-comment", msg);
  });
  socketIo.on("abc", (params) => {
  });
  socketIo.on("join", (roomId) => {
    if (roomId) {
      socketIo.join(roomId);
    }
  });
  socketIo.on("leave", (roomId) => {
    if (roomId) {
      socketIo.leave(roomId);
    }
  });
  socketIo.on("capping", async (userId) => {
    if (userId) {
      const capping = await referral.handleCappingEvent(userId);
      io.emit("cappingAmount", capping);
    }
  });
  socketIo.on("bannedUser", async (userId) => {
    if (userId) {
      const isSessionExpired = await admin.isUserSessionExpired(userId);
      console.log('bannedUser', isSessionExpired);
      if (isSessionExpired) {
        io.emit("bannedUserSession", {}, (confirmation) => {
          if (confirmation) {
            console.log('bannedUser-Event emitted successfully to user with ID:', userId);
          } else {
            console.log('bannedUser-Event Failed to emit to user with ID:', userId);
          }
        });
      }
    }
  });

  socket.configure(io);
});

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}
// marketEventListener.addContractToListen(
//   process.env.REGISTER_CONTRACT_ADDRESS
// );

// KGCEventListener.addContractToListen(
//   process.env.KGC_CONTRACT_ADDRESS
// );
/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  // marketEventListener.addContractToListen(
  //   process.env.REGISTER_CONTRACT_ADDRESS
  // );

  // KGCEventListener.addContractToListen(
  //   process.env.KGC_CONTRACT_ADDRESS
  // );

  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

module.exports = io;